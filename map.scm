
(define (flat list)
  (cond
    ((null? list) '())
    ((pair? (car list))
     (append (flat (car list))
             (flat (cdr list))))
    (else (cons (car list) (flat (cdr list))))))

(define single-apply apply)
(define (multi-apply fn . args)
  ;; (display args)
  ;; (display "\n")
  ;; (display (flat args))
  ;; (display "\n")
  (single-apply fn (flat args)))

(define single-map map)
(define (single-map fn list)
  (if (null? list)
      '()
      (cons (fn (car list))
            (single-map fn (cdr list)))))

(define (multi-map fn . list)
  ;; (display "Map\n")
  ;; (display fn)
  ;; (display "\n")
  ;; (display list)
  ;; (display "\n")
  (if (null? (car list))
      '()
      (cons (apply fn (single-map car list))
            (multi-apply multi-map fn (single-map cdr list)))))
;;      (cons (apply fn (single-map car list))
;;            (apply map fn (single-map cdr list)))))
